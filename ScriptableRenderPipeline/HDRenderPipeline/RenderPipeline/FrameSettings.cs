using System;
using UnityEngine;

namespace UnityEngine.Experimental.Rendering.HDPipeline
{
    // The settings here are per frame settings.
    // Each camera must have its own per frame settings
    [Serializable]
    public struct LightingSettings
    {
        // Setup by users
        public bool enableShadow;
        public bool enableSSR; // Depends on DepthPyramid
        public bool enableSSAO;
        public bool enableSSSAndTransmission;

        // Setup by system
        public float diffuseGlobalDimmer;
        public float specularGlobalDimmer;

        public LightingSettings()
        {
            enableShadow = true;
            enableSSR = true;
            enableSSAO = true;
            enableSSSAndTransmission = true;

            diffuseGlobalDimmer = 1.0f;
            specularGlobalDimmer = 1.0f;
        }
    }

    [Serializable]
    public struct RenderSettings
    {
        // Setup by users
        public bool enableForwardRenderingOnly; // TODO: Currently there is no way to strip the extra forward shaders generated by the shaders compiler, so we can switch dynamically.
        public bool enableDepthPrepassWithDeferredRendering;
        public bool enableAlphaTestOnlyInDeferredPrepass;

        public bool enableTransparentPrePass;
        public bool enableMotionVectors;
        public bool enableDBuffer;
        public bool enableAtmosphericScattering;
        public bool enableRoughRefraction; // Depends on DepthPyramid - If not enable, just do a copy of the scene color (?) - how to disable rough refraction ?
        public bool enableTransparentPostPass;
        public bool enableDistortion;
        public bool enablePostprocess;


        public bool enableStereo;
        public bool enableAsyncCompute;

        public bool enableOpaqueObjects;
        public bool enableTransparentObjects;

        public bool enableMSAA;

        // Setup by system
        public bool enableMaterialDisplayDebug;
        public bool enableShadowMask;

        public RenderSettings()
        {
            enableForwardRenderingOnly = false;
            enableDepthPrepassWithDeferredRendering = false;
            enableAlphaTestOnlyInDeferredPrepass = false;

            enableTransparentPrePass = true;
            enableMotionVectors = true;
            enableDBuffer = true;
            enableAtmosphericScattering = true;
            enableRoughRefraction = true;
            enableTransparentPostPass = true;
            enableDistortion = true;
            enablePostprocess = true;


            enableStereo = false;
            enableAsyncCompute = false;

            enableOpaqueObjects = true;
            enableTransparentObjects = true;

            enableMSAA = false;

            enableMaterialDisplayDebug = false;
            enableShadowMask = false;
        }
    }

    // FrameSettings contain settings for a given camera / render. This settings can change from one frame to the other
    [Serializable]
    public class FrameSettings
    {
        public LightingSettings lightingSettings;
        public RenderSettings renderSettings;
        public LightLoopSettings lightLoopSettings;

        // Init a FrameSettings from renderpipeline settings, frame settings and debug settings (if any)
        // This will aggregate the various option
        static public FrameSettings InitializeFrameSettings(RenderPipelineSettings renderPipelineSettings, FrameSettings frameSettings, FrameSettings debugSettings = null)
        {
            FrameSettings aggregate;

            // When rendering reflection probe we disable specular as it is view dependent
            if (camera.cameraType == CameraType.Reflection)
            {
                aggregate.lightingSettings.diffuseGlobalDimmer  = 1.0f;
                aggregate.lightingSettings.specularGlobalDimmer = 0.0f;
            }
            else
            {
                aggregate.lightingSettings.diffuseGlobalDimmer  = 1.0f;
                aggregate.lightingSettings.specularGlobalDimmer = 1.0f;
            }

            aggregate.lightingSettings.enableShadow                             = frameSettings.enableShadow;
            aggregate.lightingSettings.enableSSR                                = frameSettings.enableSSR && renderPipelineSettings.supportSSR;
            aggregate.lightingSettings.enableSSAO                               = frameSettings.enableSSAO && renderPipelineSettings.supportSSAO;
            aggregate.lightingSettings.enableSSSAndTransmission                 = frameSettings.enableSSSAndTransmission && renderPipelineSettings.supportSSSAndTransmission;

            // We have to fall back to forward-only rendering when scene view is using wireframe rendering mode
            // as rendering everything in wireframe + deferred do not play well together
            aggregate.renderSettings.enableForwardRenderingOnly                 = frameSettings.enableForwardRenderingOnly || GL.wireframe;
            aggregate.renderSettings.enableDepthPrepassWithDeferredRendering    = frameSettings.enableDepthPrepassWithDeferredRendering;
            aggregate.renderSettings.enableAlphaTestOnlyInDeferredPrepass       = frameSettings.enableAlphaTestOnlyInDeferredPrepass;

            aggregate.renderSettings.enableTransparentPrePass                   = frameSettings.enableTransparentPrePass;
            aggregate.renderSettings.enableMotionVectors                        = frameSettings.enableMotionVectors;
            aggregate.renderSettings.enableDBuffer                              = frameSettings.enableDBuffer && renderPipelineSettings.supportDBuffer;
            aggregate.renderSettings.enableAtmosphericScattering                = frameSettings.enableAtmosphericScattering;
            aggregate.renderSettings.enableRoughRefraction                      = frameSettings.enableRoughRefraction;
            aggregate.renderSettings.enableTransparentPostPass                  = frameSettings.enableTransparentPostPass;
            aggregate.renderSettings.enableDistortion                           = frameSettings.enableDistortion;
            aggregate.renderSettings.enablePostprocess                          = frameSettings.enablePostprocess;

            aggregate.renderSettings.enableStereo                               = frameSettings.enableStereo && UnityEngine.XR.XRSettings.isDeviceActive;
            aggregate.renderSettings.enableAsyncCompute                         = frameSettings.enableAsyncCompute;

            aggregate.renderSettings.enableOpaqueObjects                        = frameSettings.enableOpaqueObjects;
            aggregate.renderSettings.enableTransparentObjects                   = frameSettings.enableTransparentObjects;

            aggregate.renderSettings.enableMSAA                                 = frameSettings.enableMSAA && renderPipelineSettings.supportMSAA;

            aggregate.renderSettings.enableMaterialDisplayDebug                 = false;
            aggregate.renderSettings.enableShadowMask                           = renderPipelineSettings.supportShadowMask;

            // Don't display any debug information in reflection probe or preview
            if (debugSettings != null && !camera.cameraType == CameraType.Reflection && camera.cameraType != CameraType.Preview)
            {
                // Ignore diffuseGlobalDimmer and specularGlobalDimmer
                aggregate.lightingSettings.enableShadow                             = aggregate.lightingSettings.enableShadow && debugSettings.enableShadow;
                aggregate.lightingSettings.enableSSR                                = aggregate.lightingSettings.enableSSR && debugSettings.enableSSR;
                aggregate.lightingSettings.enableSSAO                               = aggregate.lightingSettings.enableSSAO && debugSettings.enableSSAO;
                aggregate.lightingSettings.enableSSSAndTransmission                 = aggregate.lightingSettings.enableSSSAndTransmission && debugSettings.enableSSSAndTransmission;

                aggregate.renderSettings.enableForwardRenderingOnly                 = aggregate.lightingSettings.enableForwardRenderingOnly && debugSettings.enableForwardRenderingOnly;
                aggregate.renderSettings.enableDepthPrepassWithDeferredRendering    = aggregate.lightingSettings.enableDepthPrepassWithDeferredRendering && debugSettings.enableDepthPrepassWithDeferredRendering;
                aggregate.renderSettings.enableAlphaTestOnlyInDeferredPrepass       = aggregate.lightingSettings.enableAlphaTestOnlyInDeferredPrepass && debugSettings.enableAlphaTestOnlyInDeferredPrepass;

                aggregate.renderSettings.enableTransparentPrePass                   = aggregate.lightingSettings.enableTransparentPrePass && debugSettings.enableTransparentPrePass;
                aggregate.renderSettings.enableMotionVectors                        = aggregate.lightingSettings.enableMotionVectors && debugSettings.enableMotionVectors;
                aggregate.renderSettings.enableDBuffer                              = aggregate.lightingSettings.enableDBuffer && debugSettings.enableDBuffer;
                aggregate.renderSettings.enableAtmosphericScattering                = aggregate.lightingSettings.enableAtmosphericScattering && debugSettings.enableAtmosphericScattering;
                aggregate.renderSettings.enableRoughRefraction                      = aggregate.lightingSettings.enableRoughRefraction && debugSettings.enableRoughRefraction;
                aggregate.renderSettings.enableTransparentPostPass                  = aggregate.lightingSettings.enableTransparentPostPass && debugSettings.enableTransparentPostPass;
                aggregate.renderSettings.enableDistortion                           = aggregate.lightingSettings.enableDistortion && debugSettings.enableDistortion;
                aggregate.renderSettings.enablePostprocess                          = aggregate.lightingSettings.enablePostprocess && debugSettings.enablePostprocess;

                aggregate.renderSettings.enableStereo                               = aggregate.lightingSettings.enableStereo && debugSettings.enableStereo && UnityEngine.XR.XRSettings.isDeviceActive;
                aggregate.renderSettings.enableAsyncCompute                         = aggregate.lightingSettings.enableAsyncCompute && debugSettings.enableAsyncCompute;

                aggregate.renderSettings.enableOpaqueObjects                        = aggregate.lightingSettings.enableOpaqueObjects && debugSettings.enableOpaqueObjects;
                aggregate.renderSettings.enableTransparentObjects                   = aggregate.lightingSettings.enableTransparentObjects && debugSettings.enableTransparentObjects;

                // ignore for enableMaterialDisplayDebug and enableShadowMask
            }

            aggregate.lightLoopSettings = LightLoopSettings.InitializeLightLoopSettings(aggregate, renderPipelineSettings, frameSettings, debugSettings);

            return aggregate;
        }
    }
}
