// Precomputes data for IntegrateLD(). See that function for a detailed description.

#include "../../Core/ShaderLibrary/Common.hlsl"
#include "../../Core/ShaderLibrary/ImageBasedLighting.hlsl"

#ifdef SHADER_API_MOBILE
#define MAX_IBL_SAMPLE_CNT 34
#else
#define MAX_IBL_SAMPLE_CNT 89
#endif

RWTexture2D<float4> output; // [MAX_SAMPLE_CNT x UNITY_SPECCUBE_LOD_STEPS]

#pragma kernel ComputeGgxIblSampleData

[numthreads(MAX_IBL_SAMPLE_CNT, UNITY_SPECCUBE_LOD_STEPS, 1)]
void ComputeGgxIblSampleData(uint3 groupThreadId : SV_GroupThreadID)
{
    uint  sampleIndex = groupThreadId.x;
    uint  mipLevel    = groupThreadId.y + 1;
    float roughness   = PerceptualRoughnessToRoughness(MipmapLevelToPerceptualRoughness(mipLevel));
    uint  sampleCount = GetIBLRuntimeFilterSampleCount(mipLevel);

    if (sampleIndex >= sampleCount)
    {
        output[groupThreadId.xy] = float4(0, 0, 0, 0);
        return;
    }

    float3 V     = float3(0, 0, 1);
    float  NdotV = 1;

    float3 localL;
    float  NdotL, NdotH, LdotH;

    const int validSampleCount = sampleCount;

    while (true)
    {
        int wastedSampleCount = 0;

        for (int i = 0; i < sampleCount; i++)
        {
            // We switch to the Golden sequence instead of the Fibonacci sequence
            // since the sample count is not guaranteed to be a Fibonacci number.
            float2 u = Golden2dSeq(i, sampleCount);
            SampleVisibleAnisoGGXDir(u, V, k_identity3x3, roughness, roughness, localL, NdotL, NdotH, LdotH, true);

            if (NdotL <= 0) wastedSampleCount++;
        }

        if (validSampleCount == sampleCount - wastedSampleCount) break;
        sampleCount++;
    }

    float2 u = Golden2dSeq(sampleIndex, sampleCount);

    SampleVisibleAnisoGGXDir(u, V, k_identity3x3, roughness, roughness, localL, NdotL, NdotH, LdotH, true);

    float rcpPdf = (4 * LdotH) / D_GGX_Visible(NdotH, NdotV, LdotH, roughness);
    float omegaS = rcp(sampleCount) * rcpPdf;

    output[groupThreadId.xy] = float4(localL, omegaS);
}
