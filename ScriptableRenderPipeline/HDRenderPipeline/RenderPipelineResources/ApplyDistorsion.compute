#include "../../Core/ShaderLibrary/Common.hlsl"
#include "../Material/Builtin/BuiltinData.hlsl"

Texture2D<float4> _DistortionTexture;
Texture2D<float> _PyramidDepthTexture;
Texture2D<float4> _GaussianPyramidColorTexture;
RWTexture2D<float4> _CameraColorTexture;

SamplerState sampler_GaussianPyramidColorTexture;
SamplerState sampler_PyramidDepthTexture;

CBUFFER_START(cb)
    float4 _Size;
    float4 _GaussianPyramidColorMipSize;
CBUFFER_END

#pragma kernel KMain
[numthreads(8, 8, 1)]
void KMain(uint2 groupId : SV_GroupID, uint2 groupThreadId : SV_GroupThreadID, uint2 dispatchThreadId : SV_DispatchThreadID)
{
    float4 encodedDistorsion = _DistortionTexture.Load(int3(dispatchThreadId, 0));
    float2 distorsion;
    float2 distorsionBlur;
    DecodeDistortion(encodedDistorsion, distorsion, distorsionBlur);

    float2 distordedUV = (float2(dispatchThreadId) + distorsion) * _Size.zw;
    float mip = (_GaussianPyramidColorMipSize.w - 1) * clamp(distorsionBlur.x, 0.0, 1.0);
    float4 sampled = _GaussianPyramidColorTexture.SampleLevel(sampler_GaussianPyramidColorTexture, distordedUV, mip);

    float2 uv = float2(dispatchThreadId) * _Size.zw;
    float depth = _PyramidDepthTexture.SampleLevel(sampler_PyramidDepthTexture, uv, 0).r;
    float distordedDepth = _PyramidDepthTexture.SampleLevel(sampler_PyramidDepthTexture, distordedUV, 0).r;

    if (depth < distordedDepth)
        _CameraColorTexture[dispatchThreadId] = sampled;
}
